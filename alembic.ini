# Configuration générique pour une seule base de données.

[alembic]
# emplacement des scripts de migration
script_location = migrations

# modèle utilisé pour générer les noms des scripts de migration ; La valeur par défaut est %%(rev)s_%%(slug)s
# Décommentez la ligne ci-dessous si vous voulez que les fichiers soient préfixés de la date et de l'heure
# voir https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# pour toutes les variables disponibles
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# chemin de sys.path, qui sera ajouté à sys.path si présent.
# par défaut, c'est le répertoire de travail actuel.
prepend_sys_path = .

# fuseau horaire à utiliser lors de la génération de la date dans le script de migration
# ainsi que dans le nom du fichier.
# Si spécifié, il nécessite la bibliothèque python>=3.9 ou backports.zoneinfo.
# Toutes les dépendances requises peuvent être installées en ajoutant `alembic[tz]` à la chaîne de requêtes pip
# la valeur est passée à ZoneInfo()
# laissez vide pour la zone horaire par défaut
# timezone =

# longueur maximale de caractères à appliquer au
# "slug" champ
# truncate_slug_length = 40

# définir sur 'true' pour exécuter l'environnement lors de
# la commande 'revision', indépendamment de l'autogénération
# revision_environment = false

# définir sur 'true' pour permettre les fichiers .pyc et .pyo sans
# un fichier source .py correspondant à être détectés comme révisions dans le
# répertoire versions
# sourceless = false

# spécification de l'emplacement de la version ; Ce défaut
# est migrations/versions. Lorsqu'on utilise plusieurs répertoires de version,
# les révisions initiales doivent être spécifiées avec --version-path.
# Le séparateur de chemin utilisé ici doit correspondre au séparateur spécifié par "version_path_separator" ci-dessous.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# séparateur de chemin de version ; Comme mentionné ci-dessus, ceci est le caractère utilisé pour diviser
# version_locations. La valeur par défaut dans les nouvelles fichiers alembic.ini est "os", qui utilise os.pathsep.
# Si cette clé n'est pas spécifiée du tout, elle recule vers le comportement legacy qui divise sur les espaces et/ou les virgules.
# Les valeurs valides pour version_path_separator sont :
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os  # Utilise os.pathsep. Configuration par défaut pour les nouveaux projets.

# définir sur 'true' pour rechercher les fichiers sources de manière récursive
# dans chaque répertoire "version_locations"
# nouvelle dans Alembic version 1.10
# recursive_version_locations = false

# l'encodage de sortie utilisé lors de l'écriture des fichiers de revision
# output_encoding = utf-8

sqlalchemy.url = postgresql://user:password@localhost/hbnb_part2


[post_write_hooks]
# post_write_hooks définit les scripts ou les fonctions Python qui sont exécutées
# sur les scripts de migration générés. Voir la documentation pour plus de détail et d'exemples

# format utilisant "black" - utilise le runner console_scripts, contre l'entrée point
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint avec des tentatives de correction en utilisant "ruff" - utilise le runner exec, exécute un binaire
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Configuration des log
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
